plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'groovy'
}

repositories {
    jcenter()
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation 'info.picocli:picocli:4.6.1'
    implementation 'info.picocli:picocli-jansi-graalvm:1.2.0'

    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-compress:1.19'
    implementation 'com.hubspot.jinjava:jinjava:2.5.2'

    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.6.0.201912101111-r'

    implementation 'com.offbytwo.jenkins:jenkins-client:0.3.8'
    implementation 'org.glassfish:jakarta.json:1.1.6'

    implementation 'org.slf4j:slf4j-api:1.7.30'
    runtimeOnly 'org.slf4j:slf4j-simple:1.7.30'
    runtimeOnly 'org.slf4j:log4j-over-slf4j:1.7.30'

    // annotationProcessor 'info.picocli:picocli-codegen:4.6.1'
    runtimeOnly 'info.picocli:picocli-codegen:4.6.1'
    runtimeOnly 'info.picocli:picocli-shell-jline3:4.6.1'
}

application {
    mainClassName = 'dev.ops.tools.microj.MicrojCli'
    applicationDefaultJvmArgs = ['-agentlib:native-image-agent=config-merge-dir=build/resources/main/META-INF/native-image']
}

task generateShellCompletion(description: 'Generate shell completion', dependsOn: 'assemble', type: JavaExec) {
    main = 'picocli.AutoComplete'
    classpath = sourceSets.main.runtimeClasspath
    args = ['--force', '--completionScript', 'build/microj_completion.sh', 'dev.ops.tools.microj.MicrojCli']
}

task reflectionConfigGenerator(description: 'Generate reflection config', dependsOn: 'assemble', type: JavaExec) {
    main = 'picocli.codegen.aot.graalvm.ReflectionConfigGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args = ['dev.ops.tools.microj.MicrojCli', '--output', 'src/main/resources/META-INF/native-image/reflect-config.json']
}

task copyRuntimeLibs(type: Copy) {
    into "$buildDir/libs"
    from sourceSets.main.runtimeClasspath
    include "*.jar"
}

assemble.finalizedBy copyRuntimeLibs

String getClasspath() {
    'libs/' + file("$buildDir/libs").list()?.join(':libs/')
}

task graalNativeImage(description: 'Generate native CLI image', type: Exec) {
    workingDir "$buildDir"
    commandLine = [
            'native-image',
            '-cp', getClasspath(),
            '-H:+ReportUnsupportedElementsAtRuntime',
            '-H:+ReportExceptionStackTraces',
            '-H:+AddAllCharsets',
            // '-H:+PrintClassInitialization',
            '--initialize-at-build-time=org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.RenameDetector,org.eclipse.jgit.diff.DiffFormatter,org.eclipse.jgit.lib.ObjectId,org.slf4j.LoggerFactory,org.eclipse.jgit.ignore.internal.Strings,org.eclipse.jgit.lib.Constants,org.eclipse.jgit.treewalk.WorkingTreeIterator,org.slf4j.impl.StaticLoggerBinder,org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.attributes.AttributesHandler,org.eclipse.jgit.util.RawParseUtils,org.eclipse.jgit.transport.Transport,org.slf4j.impl.SimpleLogger,org.eclipse.jgit.transport.TransportGitSsh,org.eclipse.jgit.transport.HttpAuthMethod$Type,org.eclipse.jgit.transport.TransportBundleFile,org.eclipse.jgit.transport.TransferConfig,org.eclipse.jgit.transport.TransportHttp',
            '--initialize-at-run-time=org.fusesource.jansi.WindowsAnsiOutputStream',
            '--no-server',
            '--no-fallback',
            // '--force-fallback',
            '--enable-http',
            '--enable-https',
            'dev.ops.tools.microj.MicrojCli',
            'microj'
    ]
}

task copyEllipticCurveCrypto(type: Copy) {
    from file(System.getenv("JAVA_HOME") + "/jre/lib/")
    into "$buildDir"
    include "libsunec.*"
}

graalNativeImage.finalizedBy copyEllipticCurveCrypto

version = "1.0"

distributions {
    mac {
        contents {
            from("$buildDir/") {
                include "microj"
                include "libsunec.dylib"
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/lreimer/microj-cli")
            credentials {
                username = 'lreimer'
                password = project.findProperty("gpr.token") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            pom {
                name = 'microj CLI'
                description = 'A small CLI to quickly create Java microservices based on pretty generic templates.'
                url = 'https://github.com/lreimer/microj-cli'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                organization {
                    name = 'QAware GmbH'
                    url = 'https://www.qaware.de'
                }
                developers {
                    developer {
                        id = 'lreimer'
                        name = 'Mario-Leander Reimer'
                        email = 'mario-leander.reimer@qaware.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/lreimer/microj-cli.git'
                    developerConnection = 'scm:git:ssh://github.com/lreimer/microj-cli.git'
                    url = 'http://github.com/lreimer/microj-cli'
                }
            }

            groupId = 'dev.ops.tools.microj'
            artifactId = 'microj-cli'
            version = "${project.version}"

            artifact distZip
        }
    }
}
